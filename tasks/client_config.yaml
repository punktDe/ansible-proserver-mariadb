---
- name: Check for root password
  changed_when: false
  ansible.builtin.stat:
    path: /usr/local/etc/mysql-password
  register: mariadb_mysql_password

- name: Create root password
  when:
    - not mariadb_mysql_password.stat.exists
    - not mariadb.galera.cluster or mariadb.galera.initializer
  ansible.builtin.copy:
    dest: /usr/local/etc/mysql-password
    content: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
    owner: "root"
    mode: '0600'

- name: Set up mysql root password
  when: not mariadb.galera.cluster or mariadb.galera.initializer
  block:
    - name: Read root-password
      ansible.builtin.slurp:
        src: "{{ item }}"
      with_items:
        - /usr/local/etc/mysql-password
      register: mariadb_root_password_slurp_result

    - name: Start MariaDB
      ansible.builtin.service:
        name: "{{ mariadb.service }}"
        state: started

    - name: Set root password in database
      ignore_errors: "{{ ansible_check_mode }}"
      community.mysql.mysql_user:
        login_user: root
        login_password: "{{ mariadb_root_password_slurp_result.results.0.content|b64decode|trim }}"
        check_implicit_admin: yes
        name: root
        password: "{{ mariadb_root_password_slurp_result.results.0.content|b64decode|trim }}"
        host: localhost
        login_unix_socket: "{{ mariadb.socket if mariadb.socket else none }}"

- name: Write root password to cli client configuration file
  ignore_errors: "{{ ansible_check_mode }}"
  when: not mariadb.galera.cluster or not mariadb.galera.arbitrator
  ansible.builtin.blockinfile:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0600
    create: yes
    block: |
      [client]
      password={{ mariadb_root_password }}
    marker: "# {mark} ANSIBLE MANAGED BLOCK: MariaDB root password"
  loop_control:
    label: "{{ item.path }}"
  with_items:
    - path: /root/.my.cnf
      owner: "root"
      group: "{{ 'root' if ansible_os_family == 'Debian' else 'wheel' }}"
    - path: "{{ ansible_user_dir }}/.my.cnf"
      owner: "{{ ansible_user_uid }}"
      group: "{{ ansible_user_gid }}"
